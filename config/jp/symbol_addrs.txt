// ld syms
// _fbss                        = 0x0048db00; // type:label
// _end                         = 0x0066f018; // type:label
// _gp                          = 0x0048db00; // type:label
// _stack                       = 0x01fe0000; // type:label
// _stack_size                  = 0x00020000; // type:label
// _args                        = 0x0048db00; // type:label
// _root                        = 0x001000c0; // type:label
// _heap_size                   = 0x0000a000; // type:label


// crt0
// ENTRYPOINT                = 0x00100008; // type:func
_start                       = 0x00100008; // type:func
_exit                        = 0x001000b8; // type:func

// game
main                         = 0x00100438; // type:func

// xtailor?
func_00110ED8                = 0x00110ED8; // type:func  

//=============================
// worldfile.c
//=============================
worldfile_getAbbr            = 0x00111F40; // type:func
worldfile_getNameNoSet       = 0x00111F68; // type:func
worldfile_getNames           = 0x00111FF0; // type:func
worldfile_getBinImgName      = 0x001120D0; // type:func

//=============================
// cdvd.c
//=============================
cdvd_GetFileDescriptor       = 0x0011FB68; // type:func
cdvd_FindFreeTask            = 0x0011FE18; // type:func
cdvd_FreeTask                = 0x0011FE80; // type:func
cdvd_Decompress              = 0x0011FE88; // type:func
cdvd_Hash                    = 0x0011FF40; // type:func
cdvd_Compare                 = 0x0011FFB8; // type:func
cdvd_FindFile                = 0x0011FFD8; // type:func
cdvd_ReadImgFile             = 0x00120108; // type:func
cdvd_TryLoadFile             = 0x00120280; // type:func
cdvd_Seek                    = 0x001206D0; // type:func
cdvd_GetFileName             = 0x00120778; // type:func
cdvd_TryLoadModule           = 0x00120820; // type:func
cdvd_StartModule             = 0x00120868; // type:func
cdvd_Initialize              = 0x00120958; // type:func

//=============================
// ppp lib
//=============================
// pppMngr.c
pppSetPrimPacket             = 0x00180F78; // type:func
drawStart                    = 0x00180FB0; // type:func
pppDbgAlloc                  = 0x00180FC0; // type:func
drawEnd                      = 0x00180FD8; // type:func
initGraphicSystem            = 0x00181010; // type:func
pppSetUp                     = 0x001818E8; // type:func
dpd_h_skip_version           = 0x00181A20; // type:func
dpd_h_skip_datainfo          = 0x00181A28; // type:func
dpd_set_object_tex           = 0x00181E40; // type:func
dpd_set_shape_data           = 0x00181EE0; // type:func
dpd_set_rsd_data             = 0x00181F60; // type:func
dpd_set_vsf_data             = 0x00182020; // type:func
dpd_set_object_data          = 0x001820B0; // type:func
vramcache_clear              = 0x001824E8; // type:func
vramcachemng_clear           = 0x00182508; // type:func
vramcache_texture            = 0x001828A0; // type:func
vramcache_clut               = 0x001828E8; // type:func
init_part_mng                = 0x001835C8; // type:func
pppInitPartRender            = 0x001836D0; // type:func
pppSetPartMatrix             = 0x001837C0; // type:func
pppDeletePObject             = 0x00183D30; // type:func
pppAllFreePObject            = 0x00183E10; // type:func
pppAlloc                     = 0x00185050; // type:func
pppFree                      = 0x00185128; // type:func

// pppKeThLz.c
pppKeThLzCalc                = 0x001851A0; // type:func
pppKeThLzCon                 = 0x001851A8; // type:func
pppKeThLzDes                 = 0x001851B0; // type:func

// pppKeThCp.c
pppKeThCpCalc                = 0x001851B8; // type:func
pppKeThCpCon                 = 0x001851C0; // type:func
pppKeThCpDes                 = 0x001851C8; // type:func

// pppKeThCpSft.c
pppKeThCpSftCalc             = 0x001851D0; // type:func

// pppKeAccSpdSv.c
pppKeAccSpdSvCalc            = 0x001851D8; // type:func
pppKeAccSpdSvCon             = 0x001851E0; // type:func
pppGetRotMatrixXYZ           = 0x001851E8; // type:func

// pppDrawHook.c
pppDrawHookDraw              = 0x00185278; // type:func

// pppPoint.c
pppPoint                     = 0x001852E0; // type:func
pppPointCon                  = 0x00185370; // type:func

// pppMove.c
pppMove                      = 0x00185398; // type:func
pppMoveCon                   = 0x00185468; // type:func

// pppAccele.c
pppAcceleCalc                = 0x00185490; // type:func
pppAcceleCon                 = 0x00185560; // type:func

// pppAngle.c
pppAngleCalc                 = 0x00185588; // type:func
pppAngleCon                  = 0x00185618; // type:func

// pppAngMove.c
pppAngMoveCalc               = 0x00185638; // type:func
pppAngMoveCon                = 0x00185708; // type:func

// pppAngAccele.c
pppAngAcceleCalc             = 0x00185728; // type:func
pppAngAcceleCon              = 0x001857F8; // type:func

// pppScale.c
pppScaleCalc                 = 0x00185818; // type:func
pppScaleCon                  = 0x001858A8; // type:func

// pppSclMove.c
pppSclMoveCalc               = 0x001858D0; // type:func
pppSclMoveCon                = 0x001859A0; // type:func

// pppSclAccele.c
pppSclAcceleCalc             = 0x001859C8; // type:func
pppSclAcceleCon              = 0x00185A98; // type:func

// pppColor.c
pppColorCalc                 = 0x00185AC0; // type:func
pppColorCon                  = 0x00185BA8; // type:func

// pppColMove.c
pppColMoveCalc               = 0x00185BD0; // type:func
pppColMoveCon                = 0x00185CC0; // type:func

// pppColAccele.c
pppColAcceleCalc             = 0x00185CE8; // type:func
pppColAcceleCon              = 0x00185DD8; // type:func

// pppVertexAttend.c
pppVertexAttendCalc          = 0x00185E00; // type:func

// pppVertexAp.c
pppVertexApCon               = 0x00185F10; // type:func
pppVertexApCalc              = 0x00186030; // type:func

// pppSegmentAp.c
pppSegmentApCalc             = 0x001862B0; // type:func

// pppFaceAp.c
pppFaceApCalc                = 0x001862B8; // type:func

// pppVertexApLc.c
pppVertexApLcCon             = 0x001862C0; // type:func
pppVertexApLcCalc            = 0x001863A0; // type:func

// pppVertexApAt.c
pppVertexApAtCon             = 0x00186620; // type:func
pppVertexApAtCalc            = 0x001866C0; // type:func

// pppVtMime.c
pppVtMimeCalc                = 0x00186898; // type:func
pppVtMimeDraw                = 0x00186938; // type:func
pppVtMimeCon                 = 0x00186B00; // type:func
pppVtMimeCon2                = 0x00186B28; // type:func
pppVtMimeDes                 = 0x00186B50; // type:func

// pppMatrixXYZ.c
pppMatrixXYZCalc             = 0x00186B98; // type:func

// pppMatrixXZY.c
pppMatrixXZYCalc             = 0x00186C98; // type:func

// pppMatrixYZX.c
pppMatrixYZXCalc             = 0x00186D98; // type:func

// pppMatrixYXZ.c
pppMatrixYXZCalc             = 0x00186E98; // type:func

// pppMatrixZXY.c
pppMatrixZXYCalc             = 0x00186F98; // type:func

// pppMatrixZYX.c
pppMatrixZYXCalc             = 0x00187098; // type:func

// pppMatrixLoc.c
pppMatrixLocCalc             = 0x00187198; // type:func

// pppMatrixScl.c
pppMatrixSclCalc             = 0x00187208; // type:func

// pppParMatrix.c
pppParMatrixCalc             = 0x001872B0; // type:func

// pppChrSclXYZMatrix.c
pppChrSclXYZMatrixCalc       = 0x001872E0; // type:func

// pppChrSclXZMatrix.c
pppChrSclXZMatrixCalc        = 0x00187378; // type:func

// pppChrSclYMatrix.c
pppChrSclYMatrixCalc         = 0x001873F0; // type:func

// pppChrYSclXYZMatrix.c
pppChrYSclXYZMatrixCalc      = 0x00187460; // type:func

// pppChrXSclXYZMatrix.c
pppChrXSclXYZMatrixCalc      = 0x001874E0; // type:func

// pppDrawMatrix.c
pppDrawMatrixCalc            = 0x00187560; // type:func

// pppDrawMatrixFront.c
pppDrawMatrixFrontCalc       = 0x00187590; // type:func

// pppDrawMatrixNoRot.c
pppDrawMatrixNoRotCalc       = 0x00187630; // type:func

// pppDrawMatrixWood.c
pppDrawMatrixWoodSta         = 0x00187720; // type:func
pppDrawMatrixWoodCalc        = 0x00187728; // type:func

// pppSMatrix.c
pppSMatrixCalc               = 0x001877D0; // type:func

// pppDrawMdl.c
pppDrawMdlDraw               = 0x001877F0; // type:func

// pppDrawMdlSemi.c
pppDrawMdlSemiDraw           = 0x00187948; // type:func

// pppDrawMdlTs.c
pppDrawMdlTsCon              = 0x00187A90; // type:func
pppDrawMdlTsCalc             = 0x00187AC0; // type:func
pppDrawMdlTsDraw             = 0x00187BA0; // type:func

// pppDrawShape.c
pppDrawShapeCon              = 0x00187D28; // type:func
pppDrawShapeCalc             = 0x00187D48; // type:func
pppDrawShapeDraw             = 0x00187E40; // type:func

// pppPObjPoint.c
pppPObjPointCalc             = 0x00187F48; // type:func

// pppPointAp.c
pppPointApCon                = 0x00187FF8; // type:func
pppPointApCalc               = 0x00188010; // type:func

// pppPointRAp.c
pppPointRApCon               = 0x00188110; // type:func
pppPointRApCalc              = 0x00188128; // type:func

// pppRandFloat.c
pppRandFloatCalc             = 0x00188380; // type:func

// pppRandUpFloat.c
pppRandUpFloatCalc           = 0x001884D0; // type:func

// pppRandDownFloat.c
pppRandDownFloatCalc         = 0x00188628; // type:func

// pppRandChar.c
pppRandCharCalc              = 0x00188780; // type:func

// pppRandUpChar.c
pppRandUpCharCalc            = 0x001888E8; // type:func

// pppRandDownChar.c
pppRandDownCharCalc          = 0x00188A58; // type:func

// pppRandShort.c
pppRandShortCalc             = 0x00188BC8; // type:func

// pppRandUpShort.c
pppRandUpShortCalc           = 0x00188D30; // type:func

// pppRandDownShort.c
pppRandDownShortCalc         = 0x00188EA0; // type:func

// pppRandInt.c
pppRandIntCalc               = 0x00189010; // type:func

// pppRandUpInt.c
pppRandUpIntCalc             = 0x001891D0; // type:func

// pppRandDownInt.c
pppRandDownIntCalc           = 0x00189368; // type:func

// pppRandFV.c
pppRandFVCalc                = 0x00189510; // type:func

// pppRandUpFV.c
pppRandUpFVCalc              = 0x001896B8; // type:func

// pppRandDownFV.c
pppRandDownFVCalc            = 0x00189868; // type:func

// pppRandIV.c
pppRandIVCalc                = 0x00189A38; // type:func

// pppRandUpIV.c
pppRandUpIVCalc              = 0x00189BE0; // type:func

// pppRandDownIV.c
pppRandDownIVCalc            = 0x00189D90; // type:func

// pppRandCV.c
pppRandCVCalc                = 0x00189F58; // type:func

// pppRandUpCV.c
pppRandUpCVCalc              = 0x0018A128; // type:func

// pppRandDownCV.c
pppRandDownCVCalc            = 0x0018A300; // type:func

// pppRandHCV.c
pppRandHCVCalc               = 0x0018A4E0; // type:func

// pppRandUpHCV.c
pppRandUpHCVCalc             = 0x0018A6B0; // type:func

// pppRandDownHCV.c
pppRandDownHCVCalc           = 0x0018A888; // type:func

// pppSRandFV.c
pppSRandFVCalc               = 0x0018AAE0; // type:func

// pppSRandUpFV.c
pppSRandUpFVCalc             = 0x0018ACB8; // type:func

// pppSRandDownFV.c
pppSRandDownFVCalc           = 0x0018AE90; // type:func

// pppSRandCV.c
pppSRandCVCalc               = 0x0018B090; // type:func

// pppSRandUpCV.c
pppSRandUpCVCalc             = 0x0018B2A0; // type:func

// pppSRandDownCV.c
pppSRandDownCVCalc           = 0x0018B4B0; // type:func

// pppSRandHCV.c
pppSRandHCVCalc              = 0x0018B6C0; // type:func

// pppSRandUpHCV.c
pppSRandUpHCVCalc            = 0x0018B8D0; // type:func

// pppSRandDownHCV.c
pppSRandDownHCVCalc          = 0x0018BAE0; // type:func

// pppEiWindFun.c
pppEiWindFunCalc             = 0x0018BC48; // type:func
pppEiWindFunCon              = 0x0018BC18; // type:func

// pppEiWfacc.c
pppEiWfaccCalc               = 0x0018BD80; // type:func

// pppDrawShapeField.c
pppDrawShapeFieldDraw        = 0x0018BF98; // type:func
pppDrawShapeFieldCon         = 0x0018BFA0; // type:func
pppDrawShapeFieldDes         = 0x0018BFA8; // type:func

// pppDrawMdlSea.c
pppDrawMdlSeaDraw            = 0x0018BFB0; // type:func
pppDrawMdlSeaCon             = 0x0018BFB8; // type:func
pppDrawMdlSeaDes             = 0x0018BFC0; // type:func

// pppMoveLoop.c
pppMoveLoopCon               = 0x0018BFC8; // type:func
pppMoveLoopCon2              = 0x0018BFF0; // type:func
pppMoveLoopCalc              = 0x0018C008; // type:func

// pppAngMoveLoop.c
pppAngMoveLoopCon            = 0x0018C0E0; // type:func
pppAngMoveLoopCon2           = 0x0018C100; // type:func
pppAngMoveLoopCalc           = 0x0018C118; // type:func

// pppSclMoveLoop.c
pppSclMoveLoopCon            = 0x0018C1F8; // type:func
pppSclMoveLoopCon2           = 0x0018C220; // type:func
pppSclMoveLoopCalc           = 0x0018C238; // type:func

// pppMatrixLoop.c
pppMatrixLoopCalc            = 0x0018C310; // type:func

// pppPointLoop.c
pppPointLoopCon              = 0x0018C428; // type:func
pppPointLoopCon2             = 0x0018C440; // type:func
pppPointLoopCalc             = 0x0018C488; // type:func

// pppAngleLoop.c
pppAngleLoopCon              = 0x0018C570; // type:func
pppAngleLoopCon2             = 0x0018C588; // type:func
pppAngleLoopCalc             = 0x0018C5D0; // type:func

// pppScaleLoop.c
pppScaleLoopCon              = 0x0018C6B8; // type:func
pppScaleLoopCon2             = 0x0018C6D0; // type:func
pppScaleLoopCalc             = 0x0018C718; // type:func

// pppDrawMatrixLoop.c
pppDrawMatrixLoopCalc        = 0x0018C7E8; // type:func

// pppDrawMdlLoop.c
pppDrawMdlLoopCon            = 0x0018C848; // type:func
pppDrawMdlLoopCon2           = 0x0018C860; // type:func
pppDrawMdlLoopDes            = 0x0018C888; // type:func
pppDrawMdlLoopCalc           = 0x0018C890; // type:func
pppDrawMdlLoopDraw           = 0x0018C9E8; // type:func

// pppDrawMdlLoopZ.c
pppDrawMdlLoopZCon           = 0x0018CC88; // type:func
pppDrawMdlLoopZCon2          = 0x0018CCA0; // type:func
pppDrawMdlLoopZDes           = 0x0018CCC8; // type:func
pppDrawMdlLoopZCalc          = 0x0018CCD0; // type:func
pppDrawMdlLoopZDraw          = 0x0018CE28; // type:func

// pppMatrixLoopXYZ.c
pppMatrixLoopXYZCalc         = 0x0018D0C8; // type:func

// pppMatrixLoopXZY.c
pppMatrixLoopXZYCalc         = 0x0018D1C8; // type:func

// pppMatrixLoopYXZ.c
pppMatrixLoopYXZCalc         = 0x0018D2C8; // type:func

// pppMatrixLoopYZX.c
pppMatrixLoopYZXCalc         = 0x0018D3C8; // type:func

// pppMatrixLoopZXY.c
pppMatrixLoopZXYCalc         = 0x0018D4C8; // type:func

// pppMatrixLoopZYX.c
pppMatrixLoopZYXCalc         = 0x0018D5C8; // type:func

// pppKeTh.c
pppKeThCalc                  = 0x0018D6C8; // type:func
pppKeThDraw                  = 0x0018DBE8; // type:func
pppKeThCon                   = 0x0018DC78; // type:func
pppKeThCon2                  = 0x0018DCD8; // type:func
pppKeThDes                   = 0x0018DD10; // type:func

// pppKeThTp.c
pppKeThTpCalc                = 0x0018DD18; // type:func
pppKeThTpCon                 = 0x0018DE00; // type:func
pppKeThTp2Con                = 0x0018DE20; // type:func

// pppKeThRes.c
pppKeThResCon                = 0x0018DE48; // type:func

// pppKeThRes8.c
pppKeThRes8Con               = 0x0018DE78; // type:func

// pppKeThRes8x4.c
pppKeThRes8x4Con             = 0x0018DEA8; // type:func

// pppKeThRes8x128.c
pppKeThRes8x128Con           = 0x0018DED8; // type:func

// pppKeThRes16.c
pppKeThRes16Con              = 0x0018DF08; // type:func

// pppKeThRes16x4.c
pppKeThRes16x4Con            = 0x0018DF38; // type:func

// pppKeThRes16x64.c
pppKeThRes16x64Con           = 0x0018DF68; // type:func

// pppKeThRes24.c
pppKeThRes24Con              = 0x0018DF98; // type:func

// pppKeThRes24x4.c
pppKeThRes24x4Con            = 0x0018DFC8; // type:func

// pppKeThRes32.c
pppKeThRes32Con              = 0x0018DFF8; // type:func

// pppKeThRes32x4.c
pppKeThRes32x4Con            = 0x0018E028; // type:func

// pppKeThRes32x32.c
pppKeThRes32x32Con           = 0x0018E058; // type:func

// pppKeThRes40.c
pppKeThRes40Con              = 0x0018E088; // type:func

// pppKeThRes40x4.c
pppKeThRes40x4Con            = 0x0018E0B8; // type:func

// pppKeThRes48.c
pppKeThRes48Con              = 0x0018E0E8; // type:func

// pppKeThRes48x4.c
pppKeThRes48x4Con            = 0x0018E118; // type:func

// pppKeThRes64.c
pppKeThRes64Con              = 0x0018E148; // type:func

// pppKeThRes64x4.c
pppKeThRes64x4Con            = 0x0018E178; // type:func

// pppKeThRes64x16.c
pppKeThRes64x16Con           = 0x0018E1A8; // type:func

// pppKeThRes128.c
pppKeThRes128Con             = 0x0018E1D8; // type:func

// pppKeThRes128x4.c
pppKeThRes128x4Con           = 0x0018E208; // type:func

// pppKeThRes128x8.c
pppKeThRes128x8Con           = 0x0018E238; // type:func

// pppKeThRes255.c
pppKeThRes255Con             = 0x0018E268; // type:func

// pppKeThRes255x4.c
pppKeThRes255x4Con           = 0x0018E298; // type:func

// pppKeThHitBorn.c
pppKeThHitBornCalc           = 0x0018E2C8; // type:func
pppKeThHitBornCon            = 0x0018E4C8; // type:func

// pppKeThSft.c
pppKeThSftCalc               = 0x0018E4E0; // type:func
pppKeThSftCon                = 0x0018E7F0; // type:func

// pppKeBornRnd.c
pppKeBornRndCalc             = 0x0018E828; // type:func
pppKeBornRndCon              = 0x0018EB80; // type:func

// pppKeBornRnd2.c
pppKeBornRnd2Calc            = 0x0018ECD8; // type:func
pppKeBornRnd2Con             = 0x0018EDC0; // type:func

// pppKeBornRnd3.c
pppKeBornRnd3Calc            = 0x0018EF00; // type:func
pppKeBornRnd3Con             = 0x0018EFE8; // type:func

// pppKeBornRnd4.c
pppKeBornRnd4Calc            = 0x0018F160; // type:func
pppKeBornRnd4Con             = 0x0018F530; // type:func

// pppKeBornRnd5.c
pppKeBornRnd5Calc            = 0x0018F688; // type:func
pppKeBornRnd5Con             = 0x0018F760; // type:func

// pppKeBornRnd6.c
pppKeBornRnd6Calc            = 0x0018FAB8; // type:func
pppKeBornRnd6Con             = 0x0018FB90; // type:func

// pppKeBornPtCmpl.c
pppKeBornPtCmplCalc          = 0x0018FDA0; // type:func
pppKeBornPtCmplCon           = 0x0018FE10; // type:func

// pppKeMvYpEff.c
pppKeMvYpEffCalc             = 0x0018FFB8; // type:func

// pppKeMdlTfd.c
pppKeMdlTfdDraw              = 0x00190128; // type:func
pppKeMdlTfdCon               = 0x00190328; // type:func

// pppKeMdlTfdUv.c
pppKeMdlTfdUvDraw            = 0x00190348; // type:func
pppKeMdlTfdUvCon             = 0x001905D8; // type:func

// pppKeMdlTfd2.c
pppKeMdlTfd2Draw             = 0x00190618; // type:func
pppKeMdlTfd2Con              = 0x00190818; // type:func

// pppKeMdlTfdUv2.c
pppKeMdlTfdUv2Draw           = 0x00190838; // type:func
pppKeMdlTfdUv2Con            = 0x00190AC8; // type:func

// pppKeMdlDtt.c
pppKeMdlDttDraw              = 0x00190B08; // type:func
pppKeMdlDttCon               = 0x00191538; // type:func
pppKeMdlDttCon2              = 0x00191558; // type:func

// pppKeMdlBmp.c
pppKeMdlBmpDraw              = 0x00191578; // type:func
pppKeMdlBmpCon               = 0x00191580; // type:func
pppKeMdlBmpCon2              = 0x00191588; // type:func

// pppKeAcmSolid.c
pppKeAcmSolidEnd             = 0x00191590; // type:func

// pppKeShpTail.c
pppKeShpTailCalc             = 0x00191598; // type:func
pppKeShpTailDraw             = 0x001917C8; // type:func
pppKeShpTailCon              = 0x00191EB8; // type:func

// pppKeShpTail2.c
pppKeShpTail2Calc            = 0x00191EE8; // type:func
pppKeShpTail2Draw            = 0x00192120; // type:func
pppKeShpTail2Con             = 0x00192780; // type:func

// pppKeShpTail3.c
pppKeShpTail3Calc            = 0x001927B0; // type:func
pppKeShpTail3Draw            = 0x00192B98; // type:func
pppKeShpTail3Con             = 0x001933C8; // type:func
pppKeShpTail3Con2            = 0x00193420; // type:func

// pppKeShpTailPht.c
pppKeShpTailPhtCalc          = 0x00193450; // type:func
pppKeShpTailPhtDraw          = 0x00193458; // type:func
pppKeShpTailPhtCon           = 0x00193460; // type:func
pppKeShpTailPhtCon2          = 0x00193468; // type:func

// pppKeShpTailLc.c
pppKeShpTailLcCalc           = 0x00193470; // type:func
pppKeShpTailLcDraw           = 0x00193478; // type:func
pppKeShpTailLcCon            = 0x00193480; // type:func

// pppKeShpDtt.c
pppKeShpDttCalc              = 0x001934B0; // type:func
pppKeShpDttDraw              = 0x001934B8; // type:func
pppKeShpDttCon               = 0x001937D0; // type:func

// pppKeLnsLp.c
pppKeLnsLpDraw               = 0x001937F0; // type:func
pppKeLnsLpCon                = 0x00193918; // type:func
pppKeLnsLpCon2               = 0x00193958; // type:func

// pppKeLnsArnd.c
pppKeLnsArndDraw             = 0x001939F8; // type:func
pppKeLnsArndCon              = 0x00193BA0; // type:func

// pppKeLnsClm.c
pppKeLnsClmDraw              = 0x00193C80; // type:func
pppKeLnsClmCon               = 0x00193E40; // type:func

// pppKeLnsCrn.c
pppKeLnsCrnDraw              = 0x00193F10; // type:func
pppKeLnsCrnCon               = 0x001940C8; // type:func

// pppKeLnsFls.c
pppKeLnsFlsDraw              = 0x00194170; // type:func
pppKeLnsFlsCon               = 0x00194328; // type:func

// pppKeLnsLpT.c
pppKeLnsLpTDraw              = 0x00194810; // type:func
pppKeLnsLpTCon               = 0x001948F0; // type:func
pppKeLnsLpTCon2              = 0x00194958; // type:func
pppKeLnsLpTDes               = 0x00194978; // type:func

// pppKeLnsArndT.c
pppKeLnsArndTDraw            = 0x001949D0; // type:func
pppKeLnsArndTCon             = 0x00194BA0; // type:func
pppKeLnsArndTDes             = 0x00194BC8; // type:func

// pppKeLnsClmT.c
pppKeLnsClmTDraw             = 0x00194C28; // type:func
pppKeLnsClmTCon              = 0x00194E10; // type:func
pppKeLnsClmTDes              = 0x00194E50; // type:func

// pppKeLnsCrnT.c
pppKeLnsCrnTDraw             = 0x00194F20; // type:func
pppKeLnsCrnTCon              = 0x00195118; // type:func
pppKeLnsCrnTDes              = 0x00195140; // type:func

// pppKeLnsFlsT.c
pppKeLnsFlsTDraw             = 0x001951D8; // type:func
pppKeLnsFlsTCon              = 0x001953C8; // type:func
pppKeLnsFlsTDes              = 0x001953F0; // type:func

// pppKeLnsLpSft.c
pppKeLnsLpSftCalc            = 0x001953F8; // type:func
pppKeLnsLpSftCon             = 0x001954B8; // type:func

// pppKeHmgEff.c
pppKeHmgEffCalc              = 0x001954D8; // type:func
pppKeHmgEffCon               = 0x001956D8; // type:func

// pppKeGrvTgt.c
pppKeGrvTgtCalc              = 0x001956E0; // type:func
pppKeGrvTgtCon               = 0x00195730; // type:func

// pppKeGrvEff.c
pppKeGrvEffCalc              = 0x00195748; // type:func
pppKeGrvEffCon               = 0x001958C8; // type:func

// pppKeHitBall.c
pppKeHitBallCalc             = 0x001958D0; // type:func
pppKeHitBallCon              = 0x00195918; // type:func

// pppKeHitBorn.c
pppKeHitBornCalc             = 0x00195920; // type:func
pppKeHitBornCon              = 0x00195A80; // type:func

// pppKeHitChkPxB.c
pppKeHitChkPxBCalc           = 0x00195A98; // type:func
pppKeHitChkPxBCon            = 0x00195CC0; // type:func

// pppKeDrct.c
pppKeDrctCalc                = 0x00195CE8; // type:func
pppKeDrctCon                 = 0x00195D28; // type:func

// pppKeMatSN.c
pppKeMatSNCalc               = 0x00195D48; // type:func
pppKeMatSNCon                = 0x00195E00; // type:func

// pppKeParMatR.c
pppKeParMatRCalc             = 0x00195E20; // type:func

// pppKeTkFade.c
pppKeTkFadeDraw              = 0x00195EC0; // type:func
pppKeTkFadeCon               = 0x00196378; // type:func

// pppKeDMat.c
pppKeDMatCalc                = 0x00196398; // type:func

// pppKeDMatFr.c
pppKeDMatFrCalc              = 0x00196410; // type:func

// pppKeMatPht.c
pppKeMatPhtCalc              = 0x001964D8; // type:func

// pppKeDMatPht.c
pppKeDMatPhtCalc             = 0x00196608; // type:func

// pppKeDMatPhtFr.c
pppKeDMatPhtFrCalc           = 0x001966C8; // type:func

// pppDrawMdl2.c
pppDrawMdl2Draw              = 0x001967C8; // type:func

// pppDrawMdlSemi2.c
pppDrawMdlSemi2Draw          = 0x00196970; // type:func

// pppDrawMdlTs2.c
pppDrawMdlTs2Con             = 0x00196B08; // type:func
pppDrawMdlTs2Calc            = 0x00196B38; // type:func
pppDrawMdlTs2Draw            = 0x00196C18; // type:func

// pppKeZCrct.c
pppKeZCrctCalc               = 0x00196DE8; // type:func

// pppKeZCrctShp.c
pppKeZCrctShpCalc            = 0x00196FF8; // type:func

// pppDrawMdl3.c
pppDrawMdl3Draw              = 0x00197220; // type:func

// pppDrawMdlSemi3.c
pppDrawMdlSemi3Draw          = 0x00197478; // type:func

// pppDrawMdlTs3.c
pppDrawMdlTs3Con             = 0x001976C0; // type:func
pppDrawMdlTs3Calc            = 0x001976F0; // type:func
pppDrawMdlTs3Draw            = 0x001977D0; // type:func

// pppKeMdlTfd3.c
pppKeMdlTfd3Draw             = 0x00197A60; // type:func
pppKeMdlTfd3Con              = 0x00197C88; // type:func

// pppKeMdlTfdUv3.c
pppKeMdlTfdUv3Draw           = 0x00197CA8; // type:func
pppKeMdlTfdUv3Con            = 0x00197F60; // type:func

// pppDrawShapeX.c
pppDrawShapeXCon             = 0x00197FA0; // type:func
pppDrawShapeXCalc            = 0x00197FC0; // type:func
pppDrawShapeXDraw            = 0x001980B8; // type:func

// pppKeShpTailX.c
pppKeShpTailXCalc            = 0x00198208; // type:func
pppKeShpTailXDraw            = 0x00198440; // type:func
pppKeShpTailXCon             = 0x00198B58; // type:func

// pppKeShpTail2X.c
pppKeShpTail2XCalc           = 0x00198B88; // type:func
pppKeShpTail2XDraw           = 0x00198DC0; // type:func
pppKeShpTail2XCon            = 0x00199468; // type:func

// pppKeShpTail3X.c
pppKeShpTail3XCalc           = 0x00199498; // type:func
pppKeShpTail3XDraw           = 0x00199880; // type:func
pppKeShpTail3XCon            = 0x0019A0F0; // type:func
pppKeShpTail3XCon2           = 0x0019A148; // type:func

// pppRyjDrawMatrixWorld.c
pppRyjDrawMatrixWorldCalc    = 0x0019A1A8; // type:func
pppRyjDrawMatrixWorldCon     = 0x0019A178; // type:func

// pppRyjDrawMatrixWorldFront.c
pppRyjDrawMatrixWorldFrontCalc = 0x0019A260; // type:func
pppRyjDrawMatrixWorldFrontCon = 0x0019A218; // type:func

// pppRyjDrawMatrixWorldNoRot.c
pppRyjDrawMatrixWorldNoRotCalc = 0x0019A380; // type:func
pppRyjDrawMatrixWorldNoRotCon = 0x0019A338; // type:func

// pppRyjDrawMatrixWorldWood.c
pppRyjDrawMatrixWorldWoodCalc = 0x0019A5C8; // type:func
pppRyjDrawMatrixWorldWoodCon = 0x0019A4A0; // type:func

// pppRyjMatrixWorldXYZ.c
pppRyjMatrixWorldXYZCon      = 0x0019A6C0; // type:func
pppRyjMatrixWorldXYZCalc     = 0x0019A720; // type:func

// pppRyjMatrixWorldXZY.c
pppRyjMatrixWorldXZYCon      = 0x0019A890; // type:func
pppRyjMatrixWorldXZYCalc     = 0x0019A8F0; // type:func

// pppRyjMatrixWorldYXZ.c
pppRyjMatrixWorldYXZCon      = 0x0019AA60; // type:func
pppRyjMatrixWorldYXZCalc     = 0x0019AAC0; // type:func

// pppRyjMatrixWorldYZX.c
pppRyjMatrixWorldYZXCon      = 0x0019AC30; // type:func
pppRyjMatrixWorldYZXCalc     = 0x0019AC90; // type:func

// pppRyjMatrixWorldZXY.c
pppRyjMatrixWorldZXYCon      = 0x0019AE00; // type:func
pppRyjMatrixWorldZXYCalc     = 0x0019AE60; // type:func

// pppRyjMatrixWorldZYX.c
pppRyjMatrixWorldZYXCon      = 0x0019AFD0; // type:func
pppRyjMatrixWorldZYXCalc     = 0x0019B030; // type:func

// pppRyjMatrixNoRot.c
pppRyjMatrixNoRotCalc        = 0x0019B1A0; // type:func

// pppRyjDrawShipoly.c
pppRyjDrawShipolyCalc        = 0x0019BEC8; // type:func
pppRyjDrawShipolyDraw        = 0x0019C168; // type:func
pppRyjDrawShipolyCon         = 0x0019C3F0; // type:func
pppRyjDrawShipolyDes         = 0x0019C418; // type:func

// pppRyjDrawShipolyBone.c
pppRyjDrawShipolyBoneCalc    = 0x0019D0F8; // type:func
pppRyjDrawShipolyBoneDraw    = 0x0019D490; // type:func
pppRyjDrawShipolyBoneCon     = 0x0019D718; // type:func
pppRyjDrawShipolyBoneDes     = 0x0019D750; // type:func

// pppRyjMegaBirth.c
pppRyjMegaBirthCalc          = 0x0019EAB8; // type:func
pppRyjMegaBirthDraw          = 0x0019F208; // type:func
pppRyjMegaBirthCon           = 0x0019F578; // type:func
pppRyjMegaBirthDes           = 0x0019F5D8; // type:func

// pppRyjMngFlag.c
pppRyjMngFlagCalc            = 0x0019F650; // type:func

// pppRyjMegaBirthPrize.c
pppRyjMegaBirthPrizeDraw     = 0x0019F950; // type:func
pppRyjMegaBirthPrizeCon      = 0x0019FCD0; // type:func

// pppRyjMegaPlace.c
pppRyjMegaPlaceCalc          = 0x001A0040; // type:func
pppRyjMegaPlaceDraw          = 0x001A0BC8; // type:func
pppRyjMegaPlaceCon           = 0x001A0C08; // type:func
pppRyjMegaPlaceDes           = 0x001A0C50; // type:func

// pppRyjMegaPlaceShape.c
pppRyjMegaPlaceShapeCalc     = 0x001A0CC8; // type:func
pppRyjMegaPlaceShapeCon      = 0x001A0D20; // type:func

// pppRyjMegaPlaceModel.c
pppRyjMegaPlaceModelCalc     = 0x001A0D50; // type:func
pppRyjMegaPlaceModelCon      = 0x001A0DA8; // type:func

// pppRyjMegaPlaceLamp.c
pppRyjMegaPlaceLampCalc      = 0x001A0DD8; // type:func
pppRyjMegaPlaceLampCon       = 0x001A0E30; // type:func

// pppRyjMegaBirthModel.c
pppRyjMegaBirthModelCalc     = 0x001A2540; // type:func
pppRyjMegaBirthModelDraw     = 0x001A2A40; // type:func
pppRyjMegaBirthModelCon      = 0x001A2E70; // type:func
pppRyjMegaBirthModelDes      = 0x001A2EA8; // type:func

// pppRyjDrawKekoto.c
pppRyjDrawKekotoCalc         = 0x001A3070; // type:func
pppRyjDrawKekotoDraw         = 0x001A30B8; // type:func
pppRyjDrawKekotoCon          = 0x001A3B80; // type:func

// pppRyjLight.c
pppRyjLightCalc              = 0x001A3BC0; // type:func
pppRyjLightCon               = 0x001A3D48; // type:func
pppRyjLightDes               = 0x001A3D60; // type:func

// pppRyjDrawMatrixWorldDtt.c
pppRyjDrawMatrixWorldDttCalc = 0x001A3DD8; // type:func
pppRyjDrawMatrixWorldDttCon  = 0x001A3DA8; // type:func

// pppRyjDrawMatrixWorldDttFr.c
pppRyjDrawMatrixWorldDttFrCalc = 0x001A3EB0; // type:func
pppRyjDrawMatrixWorldDttFrCon = 0x001A3E68; // type:func

// pppRyjMegaBirthFilter.c
pppRyjMegaBirthFilterCalc    = 0x001A4DB8; // type:func
pppRyjMegaBirthFilterDraw    = 0x001A50A8; // type:func
pppRyjMegaBirthFilterSta     = 0x001A5400; // type:func
pppRyjMegaBirthFilterCon     = 0x001A5458; // type:func
pppRyjMegaBirthFilterDes     = 0x001A54A0; // type:func

// pppRyjMegaBirthModelFilter.c
pppRyjMegaBirthModelFilterCalc = 0x001A67F0; // type:func
pppRyjMegaBirthModelFilterDraw = 0x001A6B20; // type:func
pppRyjMegaBirthModelFilterSta = 0x001A6EF8; // type:func
pppRyjMegaBirthModelFilterCon = 0x001A6F50; // type:func
pppRyjMegaBirthModelFilterDes = 0x001A6F98; // type:func

/// xberry.c
pppGetRotMatrixX             = 0x001A6FF8; // type:func
pppGetRotMatrixY             = 0x001A7078; // type:func
pppGetRotMatrixZ             = 0x001A70F8; // type:func
pppGetRotMatrixXZY           = 0x001A7178; // type:func
pppGetRotMatrixYZX           = 0x001A7208; // type:func
pppGetRotMatrixYXZ           = 0x001A7298; // type:func
pppGetRotMatrixZXY           = 0x001A7328; // type:func
pppGetRotMatrixZYX           = 0x001A73B8; // type:func
KeBornRnd2                   = 0x001A7448; // type:func
KeLnsLp_Init                 = 0x001A7BF8; // type:func
KeLnsClm_Init                = 0x001A8048; // type:func
KeLnsArnd_Init               = 0x001A8230; // type:func
KeLnsCrn_Init                = 0x001A84D8; // type:func
KeLnsFls_Draw                = 0x001A84F0; // type:func
KeLnsFls_Init                = 0x001A8758; // type:func
KeThResHd_Init               = 0x001AA960; // type:func

op_init_draw                 = 0x001ABF10; // type:func
ops_init_draw_work           = 0x001ABF30; // type:func
op_gs2_init                  = 0x001ABF58; // type:func
op_ot_draw                   = 0x001AC6F8; // type:func
op_otz_init                  = 0x001AC028; // type:func
op_init_fog_work             = 0x001AC900; // type:func
opc                          = 0x001AC9A0; // type:func
opc2                         = 0x001AC9A8; // type:func
opc3                         = 0x001AC9B0; // type:func
op_init_global               = 0x001AC9B8; // type:func
ops_init_spr                 = 0x001AC9C0; // type:func
op_num_info                  = 0x001AC9F0; // type:func
op_spr_alloc                 = 0x001AC9F8; // type:func
op_spr_rev_alloc             = 0x001ACA38; // type:func
op_spr_free                  = 0x001ACA78; // type:func
op_spr_rev_free              = 0x001ACA90; // type:func
op_spr_rev_check             = 0x001ACAA8; // type:func
op_spr_check                 = 0x001ACAE0; // type:func
op_file_read                 = 0x001ACB18; // type:func
op_file_size                 = 0x001ACBC8; // type:func
op_oef2_set                  = 0x001ACC40; // type:func
op_oef2_set2                 = 0x001ACE58; // type:func
op_oef2_set2_16              = 0x001ACE78; // type:func
op_oef2_a_get                = 0x001ACE98; // type:func
op_random                    = 0x001ACEF0; // type:func
op_random_p                  = 0x001ACF38; // type:func

//=============================
// ppp/draw/md.c
//=============================
set_ztest_off                = 0x001ACF78; // type:func
set_invisible                = 0x001ACFA8; // type:func
unset_test                   = 0x001ACFD8; // type:func
op1_md_draw                  = 0x001AD030; // type:func

//=============================
// ppp/draw/md0.c
//=============================
op_md_ot8                    = 0x001AD188; // type:func

//=============================
// memcard.c
//=============================
memcard_Initialize           = 0x002304D8; // type:func
memcard_SetDefaults          = 0x00230520; // type:func
memcard_GetAllStatus         = 0x002312B0; // type:func
memcard_GetDirStatus         = 0x002312C0; // type:func
memcard_GetFormatStatus      = 0x002312D0; // type:func
memcard_GetUnformatStatus    = 0x002312E0; // type:func
memcard_GetChdirStatus       = 0x002312F0; // type:func
memcard_GetMkdirStatus       = 0x00231300; // type:func
memcard_GetCreateStatus      = 0x00231310; // type:func
memcard_GetDeleteStatus      = 0x00231320; // type:func
memcard_GetReadStatus        = 0x00231330; // type:func
memcard_GetWriteStatus       = 0x00231340; // type:func
memcard_GetRenameStatus      = 0x00231350; // type:func
memcard_GetInfo              = 0x002319E0; // type:func
memcard_GetAllFiles          = 0x00231C88; // type:func
memcard_GetDirFiles          = 0x00231E08; // type:func
memcard_Format               = 0x00231F80; // type:func
memcard_Unformat             = 0x002320E8; // type:func
memcard_Chdir                = 0x00232250; // type:func
memcard_Mkdir                = 0x002323B0; // type:func
memcard_Create               = 0x00232510; // type:func
memcard_Delete               = 0x002327D0; // type:func
memcard_Read                 = 0x00232948; // type:func
memcard_Write                = 0x00232BF0; // type:func
memcard_Rename               = 0x00232EB0; // type:func
memcard_RunCommand           = 0x00233040; // type:func

//=============================
// disk.c
//=============================
disk_Timeout                 = 0x0024A140; // type:func
disk_GetTimer                = 0x0024A178; // type:func
func_0024A278                = 0x0024A278; // type:func
disk_IsSpaceAvailable        = 0x0024A588; // type:func
disk_StartThread             = 0x0024A2D0; // type:func
disk_GetGamecode             = 0x0024A378; // type:func
disk_GetImgName              = 0x0024A3A8; // type:func
disk_Mount                   = 0x0024A3B8; // type:func
disk_Unmount                 = 0x0024A458; // type:func
disk_GetStatus               = 0x0024A558; // type:func
disk_Seek                    = 0x0024A780; // type:func
disk_SetBlock                = 0x0024A850; // type:func

// hacks for now
D_0048BAB8 = 0x0048BAB8; // type:s32
D_004885C0 = 0x004885C0; // type:s32
D_00486F20 = 0x00486F20; // force_migration:True

//=============================
// worldfile.c
//=============================
worldAbbrs                   = 0x002B9178; // size:0x58
worldDataExt                 = 0x002B91D0; // size:0x8
roomArchiveExt               = 0x002B91D8; // size:0x8
worldDataFile                = 0x002B91F0; // size:0x40
worldBinImgFile              = 0x002B9230; // size:0x40
roomArchiveRaw               = 0x002B9270; // size:0x40
roomArchiveFile              = 0x002B92B0; // size:0x40

//=============================
// ppp lib
//=============================
RendModel                    = 0x0035EC00; // size:0x1200
RendShape                    = 0x0035FE00; // size:0x400
RendVsf                      = 0x00360200; // size:0x400
ppvParScl                    = 0x0036C6C0; // size 0x10

oa_dmagif                    = 0x0036EDC8;
spr_a                        = 0x0036F368; // size:0x80
spr_rev_a                    = 0x0036F3F0; // size:0x80
spr_index                    = 0x0036F360;
spr_rev_index                = 0x0036F3E8;

//=============================
// memcard.c
//=============================
memcardCommands              = 0x0041F8C8; // size:0x38
memcardPort                  = 0x0041F908; // type:s32
memcardSlot                  = 0x0041F90C; // type:s32
memcardType                  = 0x0041F910; // type:s32
memcardFree                  = 0x0041F914; // type:s32
memcardFormat                = 0x0041F918; // type:s32
memcardFileBuf               = 0x0041F9A0; // type:s32
memcardEntries               = 0x0041F9A4; // type:s32
memcardDirStore              = 0x0041F9A8; // size:0x20

//=============================
// disk.c
//=============================
disk_BlockSize               = 0x004642E8; // type:s32
disk_Timer                   = 0x004642F8; // type:s32
disk_SectorSize              = 0x00464300; // type:char
disk_Gamecode                = 0x00464308; // type:char
disk_ImgName                 = 0x00464340; // type:char
disk_Mgr                     = 0x00464360; // size:0x24

//=============================
// cdvd.c
//=============================
cdvd_Descriptor              = 0x004EC948; // type:char
cdvd_CbThreadStack           = 0x004ECCF0; // size:0x1000

//=============================
// ppp lib
//=============================
ppvDbgTemp                   = 0x00570140;
g_Env                        = 0x00610580; // size:0x20
ppvMng                       = 0x006105A0;
ppvEnv                       = 0x006105A4;
ppvPObj                      = 0x006105A8;
ppvEye                       = 0x006106B0;
ppvAt                        = 0x006106C0;
ppvWorldMatrix               = 0x00610700; // size:0x40
ppvWorldMatrixWood           = 0x00610740; // size:0x40
ppvScreenMatrix              = 0x00610780; // size:0x40
ppvSWMatrix                  = 0x006107C0; // size:0x40
ppvSWMatrixWood              = 0x00610800; // size:0x40
ppvUnitMatrix                = 0x00610900; // size:0x40
ppvZeroVector                = 0x00610940; // size:0x10
ppvlpCMatrix                 = 0x00610954;
ppvUserStopPartF             = 0x0061095C; // type:s32
ppvHookFuncTbl               = 0x00610960;
ppvCurPrimpLen               = 0x00610968; // type:s32
ppvPrimp                     = 0x0061096C;
ppvPrimpLen                  = 0x00610970; // type:s32
ppvEmptyLoop                 = 0x00610974; // type:s32
ppvVertex                    = 0x00610978; // type:s32
g_matUnit                    = 0x00618A10; // size:0x40
g_vecCamDir                  = 0x00618E60; // size:0x10
g_vecCamDirM                 = 0x00618E70; // size:0x10
KeDMat                       = 0x00618EC0; // size:0x40
KeMatPht                     = 0x00618F00; // size:0x40

//=============================
// memcard.c
//=============================
memcardCurCmdIdx             = 0x00641FC0;
memcardLoopStep              = 0x00641FC4;
memcardResult                = 0x00641FD8;
memcardStatus                = 0x00641FF8; //size:0x38
memcardFileName              = 0x00642030;
memcardNewFileName           = 0x00642034;
memcardFileBuffer            = 0x00642038;
memcardFileSize              = 0x0064203C;
memcardFileHandle            = 0x00642040;

//=============================
// disk.c
//=============================
disk_ThreadStack             = 0x00663A90; //size:0x1000
